
// Global variables
float4 AmbientColor : register (c0);
float4 DiffuseColor : register (c1);     

texture DiffuseMap : register (t0);

// Texture samplers
sampler DiffuseMapSampler = 
sampler_state
{
    Texture = <DiffuseMap>;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};

/////////////////////////////////
// IO Structs

struct VS_OUTPUT
{
    float4 Position   : POSITION;   // vertex position 
    float2 UV0  : TEXCOORD0;  // vertex texture coords 
};

struct PS_OUTPUT
{
    float4 Color : COLOR0;  // Pixel color    
};

///////////////////////////////
// functions

PS_OUTPUT main(VS_OUTPUT input) 
{ 
    PS_OUTPUT Output;

    // Lookup mesh texture and modulate it with diffuse
    Output.Color = saturate(tex2D(DiffuseMapSampler, input.UV0) * DiffuseColor + AmbientColor);
    //Output.Color = float4(1.0f, 1.0f, 1.0f, 1.0f);

    return Output;
}